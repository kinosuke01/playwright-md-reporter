import type {
  FullConfig,
  FullResult,
  Suite,
  TestCase,
  TestResult,
} from "@playwright/test/reporter";

// Fixed date for predictable test results
const FIXED_DATE = new Date("2025-01-01T12:00:00Z");

export const mockConfig: FullConfig = {
  forbidOnly: false,
  fullyParallel: false,
  globalSetup: null,
  globalTeardown: null,
  globalTimeout: 30000,
  grep: /.*/,
  grepInvert: null,
  maxFailures: 0,
  metadata: {},
  preserveOutput: "always",
  reporter: [["list"]],
  reportSlowTests: { max: 5, threshold: 15000 },
  rootDir: "/test/project",
  quiet: false,
  projects: [],
  shard: null,
  updateSnapshots: "missing",
  updateSourceMethod: "patch",
  version: "1.40.0",
  workers: 4,
  webServer: null,
};

export const mockPassedTestCase: TestCase = {
  id: "test-passed",
  title: "should pass with fixtures",
  location: {
    file: "/test/project/tests/mixed.spec.ts",
    line: 10,
    column: 3,
  },
  parent: {} as Suite,
  repeatEachIndex: 0,
  retries: 0,
  timeout: 30000,
  expectedStatus: "passed",
  annotations: [],
  tags: [],
  ok: () => true,
  outcome: () => "expected",
  titlePath: () => ["Mixed Tests", "should pass with fixtures"],
  results: [],
  type: "test",
};

export const mockFailedTestCase: TestCase = {
  id: "test-failed",
  title: "should fail with hooks",
  location: {
    file: "/test/project/tests/mixed.spec.ts",
    line: 20,
    column: 3,
  },
  parent: {} as Suite,
  repeatEachIndex: 0,
  retries: 0,
  timeout: 30000,
  expectedStatus: "passed",
  annotations: [],
  tags: [],
  ok: () => false,
  outcome: () => "unexpected",
  titlePath: () => ["Mixed Tests", "should fail with hooks"],
  results: [],
  type: "test",
};

export const mockSkippedTestCase: TestCase = {
  id: "test-skipped",
  title: "should be skipped",
  location: {
    file: "/test/project/tests/mixed.spec.ts",
    line: 30,
    column: 3,
  },
  parent: {} as Suite,
  repeatEachIndex: 0,
  retries: 0,
  timeout: 30000,
  expectedStatus: "skipped",
  annotations: [],
  tags: [],
  ok: () => true,
  outcome: () => "skipped",
  titlePath: () => ["Mixed Tests", "should be skipped"],
  results: [],
  type: "test",
};

export const mockPassedTestResult: TestResult = {
  retry: 0,
  parallelIndex: 0,
  workerIndex: 0,
  duration: 1200,
  status: "passed",
  errors: [],
  error: undefined,
  stdout: [],
  stderr: [],
  annotations: [],
  startTime: FIXED_DATE,
  attachments: [],
  steps: [
    {
      title: "beforeEach hook",
      category: "hook",
      startTime: FIXED_DATE,
      duration: 100,
      error: undefined,
      steps: [],
      titlePath: () => ["beforeEach hook"],
      annotations: [],
      attachments: [],
    },
    {
      title: "Setup database",
      category: "fixture",
      startTime: FIXED_DATE,
      duration: 200,
      error: undefined,
      steps: [
        {
          title: "Connect to database",
          category: "fixture",
          startTime: FIXED_DATE,
          duration: 100,
          error: undefined,
          steps: [],
          titlePath: () => ["Setup database", "Connect to database"],
          annotations: [],
          attachments: [],
        },
        {
          title: "Create test data",
          category: "fixture",
          startTime: FIXED_DATE,
          duration: 100,
          error: undefined,
          steps: [],
          titlePath: () => ["Setup database", "Create test data"],
          annotations: [],
          attachments: [],
        },
      ],
      titlePath: () => ["Setup database"],
      annotations: [],
      attachments: [],
    },
    {
      title: "Run actual test",
      category: "test",
      startTime: FIXED_DATE,
      duration: 800,
      error: undefined,
      steps: [],
      titlePath: () => ["Run actual test"],
      annotations: [],
      attachments: [],
    },
    {
      title: "afterEach hook",
      category: "hook",
      startTime: FIXED_DATE,
      duration: 100,
      error: undefined,
      steps: [],
      titlePath: () => ["afterEach hook"],
      annotations: [],
      attachments: [],
    },
  ],
};

export const mockFailedTestResult: TestResult = {
  retry: 0,
  parallelIndex: 1,
  workerIndex: 1,
  duration: 600,
  status: "failed",
  errors: [],
  error: {
    message: "Assertion failed",
    stack: "Error: Assertion failed\n    at test (/test/mixed.spec.ts:22:10)",
    location: undefined,
  },
  stdout: [],
  stderr: [],
  annotations: [],
  startTime: FIXED_DATE,
  attachments: [],
  steps: [
    {
      title: "beforeEach hook",
      category: "hook",
      startTime: FIXED_DATE,
      duration: 100,
      error: undefined,
      steps: [],
      titlePath: () => ["beforeEach hook"],
      annotations: [],
      attachments: [],
    },
    {
      title: "Main test step",
      category: "test",
      startTime: FIXED_DATE,
      duration: 400,
      error: undefined,
      steps: [],
      titlePath: () => ["Main test step"],
      annotations: [],
      attachments: [],
    },
    {
      title: "Unknown category step",
      category: "unknown",
      startTime: FIXED_DATE,
      duration: 100,
      error: undefined,
      steps: [],
      titlePath: () => ["Unknown category step"],
      annotations: [],
      attachments: [],
    },
  ],
};

export const mockSkippedTestResult: TestResult = {
  retry: 0,
  parallelIndex: 2,
  workerIndex: 2,
  duration: 0,
  status: "skipped",
  errors: [],
  error: undefined,
  stdout: [],
  stderr: [],
  annotations: [],
  startTime: FIXED_DATE,
  attachments: [],
  steps: [],
};

export const mockSuite: Suite = {
  title: "Mixed Status Tests",
  suites: [],
  tests: [mockPassedTestCase, mockFailedTestCase, mockSkippedTestCase],
  parent: undefined,
  project: () => undefined,
  allTests: () => [mockPassedTestCase, mockFailedTestCase, mockSkippedTestCase],
  entries: () => [mockPassedTestCase, mockFailedTestCase, mockSkippedTestCase],
  titlePath: () => ["Mixed Status Tests"],
  type: "describe",
};

// Update parent references
mockPassedTestCase.parent = mockSuite;
mockFailedTestCase.parent = mockSuite;
mockSkippedTestCase.parent = mockSuite;

export const mockFullResult: FullResult = {
  status: "failed",
  startTime: FIXED_DATE,
  duration: 2,
};
